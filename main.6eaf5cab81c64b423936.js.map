{"version":3,"sources":["webpack:///./js/spinner.js","webpack:///./js/updateFaceData.js","webpack:///./js/getGeoPosition.js","webpack:///./js/fetchWeather.js","webpack:///./index.js"],"names":["spinner","document","querySelector","js_spinner","classList","remove","add","updateFaceData","data","refs","locationRef","tempRef","humidityRef","windRef","conditionsRef","iconRef","weatherDisplayRef","getElementById","Object","keys","length","textContent","location","name","current","temp_c","humidity","wind_kph","condition","text","setAttribute","icon","PNotify","notice","options","fetchWeather","usersPosition","fetch","baseUrl","then","response","json","Promise","resolve","addEventListener","event","preventDefault","valueOfCity","getElementsByTagName","value","forms","reset","enableHighAccuracy","timeout","maximumAge","reject","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","catch","error"],"mappings":"uIAAMA,EAAUC,SAASC,cAAc,YACxBC,EAAA,WAEXH,EAAQI,UAAUC,OAAO,cAFdF,EAAA,WAKXH,EAAQI,UAAUE,IAAI,gDCLX,SAASC,EAAeC,GACrC,IAAMC,EAAO,CACXC,YAAaT,SAASC,cAAc,+BACpCS,QAASV,SAASC,cAAc,2BAChCU,YAAaX,SAASC,cAAc,+BACpCW,QAASZ,SAASC,cAAc,2BAChCY,cAAeb,SAASC,cAAc,iCACtCa,QAASd,SAASC,cAAc,SAChCc,kBAAmBf,SAASgB,eAAe,YAEZ,IAA7BC,OAAOC,KAAKX,GAAMY,QAOtBX,EAAKC,YAAYW,YAAjB,GAAkCb,EAAKc,SAASC,KAChDd,EAAKE,QAAQU,YAAb,GAA8Bb,EAAKgB,QAAQC,OAC3ChB,EAAKG,YAAYS,YAAiBb,EAAKgB,QAAQE,SAA/C,IACAjB,EAAKI,QAAQQ,YAAiBb,EAAKgB,QAAQG,SAA3C,OACAlB,EAAKK,cAAcO,YAAnB,GAAoCb,EAAKgB,QAAQI,UAAUC,KAC3DpB,EAAKM,QAAQe,aAAa,MAA1B,GAAoCtB,EAAKgB,QAAQI,UAAUC,MAC3DpB,EAAKM,QAAQe,aAAa,MAA1B,GAAoCtB,EAAKgB,QAAQI,UAAUG,MAE3DtB,EAAKO,kBAAkBZ,UAAUC,OAAO,cAdtC2B,IAAQC,OAAO,CACbJ,KACE,6ECwDAK,sBCtEO,SAASC,EAAaC,GAInC,GAAiB,wBAAbA,EAWJ,OARgBC,MAJOC,8EAA0CF,GAK9DG,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBF,KAAK,SAAA/B,GACJ,OAAOkC,QAAQC,QAAQnC,KCqDNP,SAASgB,eAAe,eAiBhC2B,iBAAiB,SAfhC,SAAsBC,GACpBA,EAAMC,iBAEN,IAAMC,EAAc9C,SAAS+C,qBAAqB,SAAS,GAAGC,MAC1C,KAAhBF,EAMJZ,EAAY,GAAIY,GAAeR,KAAK,SAAA/B,GAClCD,EAAeC,GACfP,SAASiD,MAAM,eAAeC,UAP9BnB,IAAQC,OAAO,CACbJ,KAAM,2CFHJK,EAAU,CACdkB,oBAAoB,EACpBC,QAAS,IACTC,WAAY,MAEP,IAAIZ,QAAQ,SAACC,EAASY,GAC3BC,UAAUC,YAAYC,mBAAmBf,EAASY,EAAQrB,MEQ3DK,KAAK,SAAAjB,GACJtB,IAEAmC,EACKb,EAASqC,OAAOC,SADT,IACqBtC,EAASqC,OAAOE,WAC/CtB,KAAK,SAAA/B,GACLD,EAAeC,GACfR,QAKH8D,MAAM,SAAAC,GACL/B,IAAQC,OAAO,CACbJ,KAAM,iEAER7B","file":"main.6eaf5cab81c64b423936.js","sourcesContent":["const spinner = document.querySelector('#spinner');\r\nexport default {\r\n  show() {\r\n    spinner.classList.remove('is-hidden');\r\n  },\r\n  hide() {\r\n    spinner.classList.add('is-hidden');\r\n  },\r\n};\r\n","import PNotify from '../../node_modules/pnotify/dist/es/PNotify';\r\nexport default function updateFaceData(data) {\r\n  const refs = {\r\n    locationRef: document.querySelector('span[data-field=\"location\"]'),\r\n    tempRef: document.querySelector('span[data-field=\"temp\"]'),\r\n    humidityRef: document.querySelector('span[data-field=\"humidity\"]'),\r\n    windRef: document.querySelector('span[data-field=\"wind\"]'),\r\n    conditionsRef: document.querySelector('span[data-field=\"conditions\"]'),\r\n    iconRef: document.querySelector('.icon'),\r\n    weatherDisplayRef: document.getElementById('weather'),\r\n  };\r\n  if (Object.keys(data).length === 1) {\r\n    PNotify.notice({\r\n      text:\r\n        'Позиция с таким названием не найдена. Введите верное название города',\r\n    });\r\n    return;\r\n  }\r\n  refs.locationRef.textContent = `${data.location.name}`;\r\n  refs.tempRef.textContent = `${data.current.temp_c}`;\r\n  refs.humidityRef.textContent = `${data.current.humidity}%`;\r\n  refs.windRef.textContent = `${data.current.wind_kph} kph`;\r\n  refs.conditionsRef.textContent = `${data.current.condition.text}`;\r\n  refs.iconRef.setAttribute('alt', `${data.current.condition.text}`);\r\n  refs.iconRef.setAttribute('src', `${data.current.condition.icon}`);\r\n\r\n  refs.weatherDisplayRef.classList.remove('is-hidden');\r\n}\r\n","// Version 1 (BEFORE viwed lection  MUST DELETE!!!!!!!!!!!!1)\r\n\r\n//import { reject } from 'q';\r\n\r\n// import PNotify from '../../node_modules/pnotify/dist/es/PNotify';\r\n// import spinner from './spinner';\r\n// export default function getGeoPosition() {\r\n//   const options = {\r\n//     enableHighAccuracy: true,\r\n//     timeout: 5000,\r\n//     maximumAge: 1800000,\r\n//   };\r\n\r\n//   const processData = {};\r\n\r\n//   const promise = new Promise((resolve, reject) => {\r\n//     function success(pos) {\r\n//       const crd = pos.coords;\r\n//       processData.latitude = crd.latitude;\r\n//       processData.longitude = crd.longitude;\r\n//     }\r\n\r\n//     function error(err) {\r\n//       console.warn(`ERROR(${err.code}): ${err.message}`);\r\n\r\n//       PNotify.notice({\r\n//         text: 'Нет доступа к геопозиции, используйте поиск по имени города.',\r\n//       });\r\n//       spinner.hide();\r\n//       //Расскоментировать для вывода уведомлний пользователю о причинах недоступной геолокации\r\n\r\n//       // switch (err.code) {\r\n//       //   case err.PERMISSION_DENIED:\r\n//       //     alert(\r\n//       //       'Пользователь не разрешил определить местоположение. Воспользуйтесь поиском по названию города',\r\n//       //     );\r\n\r\n//       //     break;\r\n//       //   case err.TIMEOUT:\r\n//       //     alert(\r\n//       //       'Время ожидания браузером на определение местоположения прошло. Воспользуйтесь поиском по названию города или перезагрузите страницу и в течение 5 секунд позвольте браузеру определять ваше местоположение ',\r\n//       //     );\r\n//       //     break;\r\n//       //   case err.POSITION_UNAVAILABLE:\r\n//       //     alert(\r\n//       //       'Информация о местоположении недоступна. Воспользуйтесь поиском по названию города',\r\n//       //     );\r\n//       //     break;\r\n//       //   case err.UNKNOWN_ERROR:\r\n//       //     alert(\r\n//       //       'Произошла неизвестная ошибка определения местоположения. Воспользуйтесь поиском по названию города',\r\n//       //     );\r\n//       //     break;\r\n//       //   default:\r\n//       //     alert('Error.code: ' + err.code + ' Error.message: ' + err.message);\r\n//       //     break;\r\n//       // }\r\n//       return (processData.error = `ERROR(${err.code}): ${err.message}`);\r\n//     }\r\n//     navigator.geolocation.getCurrentPosition(success, error, options);\r\n\r\n//     resolve(processData);\r\n//   });\r\n\r\n//   return promise;\r\n// }\r\n\r\n//===================================================================\r\n//Version2\r\nexport default function getGeoPosition() {\r\n  const options = {\r\n    enableHighAccuracy: true,\r\n    timeout: 5000,\r\n    maximumAge: 1800000,\r\n  };\r\n  return new Promise((resolve, reject) => {\r\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\r\n  });\r\n}\r\n","export default function fetchWeather(usersPosition) {\r\n  const baseUrl = 'https://api.apixu.com/v1/';\r\n  const accessKey = 'b47a5685a79b48b38c180939192207';\r\n  const fetchString = `${baseUrl}current.json?key=${accessKey}&q=${usersPosition}`;\r\n  if (usersPosition === `undefined,undefined`) {\r\n    return;\r\n  }\r\n  const weather = fetch(fetchString)\r\n    .then(response => {\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      return Promise.resolve(data);\r\n    });\r\n\r\n  return weather;\r\n}\r\n","// Version 1 (BEFORE viwed lection  MUST DELETE!!!!!!!!!!!!1)\n\n// import './styles.css';\n\n// import spinner from './js/spinner';\n// import updateFaceData from './js/updateFaceData';\n// import getGeoPosition from './js/getGeoPosition';\n// import fetchWeather from './js/fetchWeather';\n// import PNotify from '../node_modules/pnotify/dist/es/PNotify';\n\n// const getWeatherFunc = getGeoPosition().then(data => {\n//   spinner.show();\n//   const getCityFormRef = document.getElementById('search-form');\n\n//   function handleSubmit(event) {\n//     event.preventDefault();\n//     const valueOfCity = document.getElementsByTagName('input')[0].value;\n//     if (valueOfCity === '') {\n//       PNotify.notice({\n//         text: 'Пожалуйста введите название города!',\n//       });\n//       return;\n//     }\n\n//     fetchWeather(`${valueOfCity}`).then(data => {\n//       updateFaceData(data);\n//     });\n\n//     getCityFormRef.reset();\n//   }\n\n//   setTimeout(() => {\n//     if (Object.keys(data).length === 1) {\n//       getCityFormRef.addEventListener('submit', handleSubmit);\n//       spinner.hide();\n//       return;\n//     }\n\n//     setTimeout(() => {\n//       getCityFormRef.addEventListener('submit', handleSubmit);\n//       fetchWeather(`${data.latitude},${data.longitude}`).then(data => {\n//         if (Object.keys(data).length === 1) {\n//           spinner.hide();\n//           return;\n//         }\n//         updateFaceData(data);\n//         return;\n//       });\n//       spinner.hide();\n//       return;\n//     }, 5000);\n//   }, 20);\n// });\n\n//++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n//version2 After viwed lections\n\nimport './styles.css';\n\nimport spinner from './js/spinner';\nimport updateFaceData from './js/updateFaceData';\nimport getGeoPosition from './js/getGeoPosition';\nimport fetchWeather from './js/fetchWeather';\nimport PNotify from '../node_modules/pnotify/dist/es/PNotify';\n\nconst getCityFormRef = document.getElementById('search-form');\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const valueOfCity = document.getElementsByTagName('input')[0].value;\n  if (valueOfCity === '') {\n    PNotify.notice({\n      text: 'Пожалуйста введите название города!',\n    });\n    return;\n  }\n  fetchWeather(`${valueOfCity}`).then(data => {\n    updateFaceData(data);\n    document.forms['search-form'].reset();\n  });\n}\ngetCityFormRef.addEventListener('submit', handleSubmit);\ngetGeoPosition()\n  .then(location => {\n    spinner.show();\n\n    fetchWeather(\n      `${location.coords.latitude},${location.coords.longitude}`,\n    ).then(data => {\n      updateFaceData(data);\n      spinner.hide();\n\n      return;\n    });\n  })\n  .catch(error => {\n    PNotify.notice({\n      text: 'Нет доступа к геопозиции, используйте поиск по имени города.',\n    });\n    spinner.hide();\n  });\n"],"sourceRoot":""}