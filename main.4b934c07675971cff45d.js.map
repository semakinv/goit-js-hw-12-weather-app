{"version":3,"sources":["webpack:///./js/spinner.js","webpack:///./js/updateFaceData.js","webpack:///./js/fetchWeather.js","webpack:///./index.js","webpack:///./js/getGeoPosition.js"],"names":["spinner","document","querySelector","js_spinner","show","classList","remove","hide","add","updateFaceData","data","refs","locationRef","tempRef","humidityRef","windRef","conditionsRef","iconRef","weatherDisplayRef","getElementById","Object","keys","length","textContent","location","name","current","temp_c","humidity","wind_kph","condition","text","setAttribute","icon","PNotify","notice","fetchWeather","usersPosition","fetch","baseUrl","then","response","json","Promise","resolve","options","processData","enableHighAccuracy","timeout","maximumAge","reject","navigator","geolocation","getCurrentPosition","pos","crd","coords","latitude","longitude","err","console","warn","code","message","error","getCityFormRef","handleSubmit","event","preventDefault","reset","log","setTimeout","addEventListener"],"mappings":"iJAAMA,EAAUC,SAASC,cAAc,YACxBC,EAAA,CACbC,KADa,WAEXJ,EAAQK,UAAUC,OAAO,cAE3BC,KAJa,WAKXP,EAAQK,UAAUG,IAAI,uCCLX,SAASC,EAAeC,GACrC,IAAMC,EAAO,CACXC,YAAaX,SAASC,cAAc,+BACpCW,QAASZ,SAASC,cAAc,2BAChCY,YAAab,SAASC,cAAc,+BACpCa,QAASd,SAASC,cAAc,2BAChCc,cAAef,SAASC,cAAc,iCACtCe,QAAShB,SAASC,cAAc,SAChCgB,kBAAmBjB,SAASkB,eAAe,YAEZ,IAA7BC,OAAOC,KAAKX,GAAMY,QAOtBX,EAAKC,YAAYW,YAAjB,GAAkCb,EAAKc,SAASC,KAChDd,EAAKE,QAAQU,YAAb,GAA8Bb,EAAKgB,QAAQC,OAC3ChB,EAAKG,YAAYS,YAAiBb,EAAKgB,QAAQE,SAA/C,IACAjB,EAAKI,QAAQQ,YAAiBb,EAAKgB,QAAQG,SAA3C,OACAlB,EAAKK,cAAcO,YAAnB,GAAoCb,EAAKgB,QAAQI,UAAUC,KAC3DpB,EAAKM,QAAQe,aAAa,MAA1B,GAAoCtB,EAAKgB,QAAQI,UAAUC,MAC3DpB,EAAKM,QAAQe,aAAa,MAA1B,GAAoCtB,EAAKgB,QAAQI,UAAUG,MAE3DtB,EAAKO,kBAAkBb,UAAUC,OAAO,cAdtC4B,IAAQC,OAAO,CACbJ,KACE,6FCdO,SAASK,EAAaC,GAInC,GAAiB,wBAAbA,EAWJ,OARgBC,MAJOC,8EAA0CF,GAK9DG,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBF,KAAK,SAAA9B,GACJ,OAAOiC,QAAQC,QAAQlC,KCJ7B,ICLQmC,EAMAC,GANAD,EAAU,CACdE,oBAAoB,EACpBC,QAAS,IACTC,WAAY,MAGRH,EAAc,GAEJ,IAAIH,QAAQ,SAACC,EAASM,GA4CpCC,UAAUC,YAAYC,mBA3CtB,SAAiBC,GACf,IAAMC,EAAMD,EAAIE,OAChBV,EAAYW,SAAWF,EAAIE,SAC3BX,EAAYY,UAAYH,EAAIG,WAG9B,SAAeC,GAmCb,OAlCAC,QAAQC,KAAR,SAAsBF,EAAIG,KAA1B,MAAoCH,EAAII,SAExC7B,IAAQC,OAAO,CACbJ,KAAM,iEAER/B,EAAQO,OA6BAuC,EAAYkB,MAAZ,SAA6BL,EAAIG,KAAjC,MAA2CH,EAAII,SAEAlB,GAEzDD,EAAQE,MDjD4BN,KAAK,SAAA9B,GAC3CV,EAAQI,OACR,IAAM6D,EAAiBhE,SAASkB,eAAe,eAC7B8C,EAAe/D,cAAc,sBAI/C,SAASgE,EAAaC,GACpBA,EAAMC,iBAUNhC,EARoB,WAQWI,KAAK,SAAA9B,GAClCD,EAAeC,KAGjBuD,EAAeI,QAlBjBT,QAAQU,IAAI,yBACZV,QAAQU,IAAIL,EAAe/D,cAAc,uBACzC0D,QAAQU,IAAI,yBAmBZC,WAAW,WACT,GAAiC,IAA7BnD,OAAOC,KAAKX,GAAMY,OAGpB,OAFA2C,EAAeO,iBAAiB,SAAUN,QAC1ClE,EAAQO,OAIVgE,WAAW,WACTN,EAAeO,iBAAiB,SAAUN,GAC1C9B,EAAgB1B,EAAK+C,SAAT,IAAqB/C,EAAKgD,WAAalB,KAAK,SAAA9B,GACrB,IAA7BU,OAAOC,KAAKX,GAAMY,OAItBb,EAAeC,GAHbV,EAAQO,SAMZP,EAAQO,QAEP,MACF","file":"main.4b934c07675971cff45d.js","sourcesContent":["const spinner = document.querySelector('#spinner');\r\nexport default {\r\n  show() {\r\n    spinner.classList.remove('is-hidden');\r\n  },\r\n  hide() {\r\n    spinner.classList.add('is-hidden');\r\n  },\r\n};\r\n","import PNotify from '../../node_modules/pnotify/dist/es/PNotify';\r\nexport default function updateFaceData(data) {\r\n  const refs = {\r\n    locationRef: document.querySelector('span[data-field=\"location\"]'),\r\n    tempRef: document.querySelector('span[data-field=\"temp\"]'),\r\n    humidityRef: document.querySelector('span[data-field=\"humidity\"]'),\r\n    windRef: document.querySelector('span[data-field=\"wind\"]'),\r\n    conditionsRef: document.querySelector('span[data-field=\"conditions\"]'),\r\n    iconRef: document.querySelector('.icon'),\r\n    weatherDisplayRef: document.getElementById('weather'),\r\n  };\r\n  if (Object.keys(data).length === 1) {\r\n    PNotify.notice({\r\n      text:\r\n        'Позиция с таким названием не найдена. Введите верное название города',\r\n    });\r\n    return;\r\n  }\r\n  refs.locationRef.textContent = `${data.location.name}`;\r\n  refs.tempRef.textContent = `${data.current.temp_c}`;\r\n  refs.humidityRef.textContent = `${data.current.humidity}%`;\r\n  refs.windRef.textContent = `${data.current.wind_kph} kph`;\r\n  refs.conditionsRef.textContent = `${data.current.condition.text}`;\r\n  refs.iconRef.setAttribute('alt', `${data.current.condition.text}`);\r\n  refs.iconRef.setAttribute('src', `${data.current.condition.icon}`);\r\n\r\n  refs.weatherDisplayRef.classList.remove('is-hidden');\r\n}\r\n","export default function fetchWeather(usersPosition) {\r\n  const baseUrl = 'https://api.apixu.com/v1/';\r\n  const accessKey = 'b47a5685a79b48b38c180939192207';\r\n  const fetchString = `${baseUrl}current.json?key=${accessKey}&q=${usersPosition}`;\r\n  if (usersPosition === `undefined,undefined`) {\r\n    return;\r\n  }\r\n  const weather = fetch(fetchString)\r\n    .then(response => {\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      return Promise.resolve(data);\r\n    });\r\n\r\n  return weather;\r\n}\r\n","import './styles.css';\n\nimport spinner from './js/spinner';\nimport updateFaceData from './js/updateFaceData';\nimport getGeoPosition from './js/getGeoPosition';\nimport fetchWeather from './js/fetchWeather';\nimport PNotify from '../node_modules/pnotify/dist/es/PNotify';\n\nconst getWeatherFunc = getGeoPosition().then(data => {\n  spinner.show();\n  const getCityFormRef = document.getElementById('search-form');\n  const cityInput = getCityFormRef.querySelector('input[type=\"text\"]');\n  console.log('+++++++++++++++++++++');\n  console.log(getCityFormRef.querySelector('input[type=\"text\"]'));\n  console.log('+++++++++++++++++++++');\n  function handleSubmit(event) {\n    event.preventDefault();\n    //const valueOfCity = cityInput.value;\n    const valueOfCity = 'Toronto';\n    if (valueOfCity === '') {\n      PNotify.notice({\n        text: 'Пожалуйста введите название города!',\n      });\n      return;\n    }\n\n    fetchWeather(`${valueOfCity}`).then(data => {\n      updateFaceData(data);\n    });\n\n    getCityFormRef.reset();\n  }\n\n  setTimeout(() => {\n    if (Object.keys(data).length === 1) {\n      getCityFormRef.addEventListener('submit', handleSubmit);\n      spinner.hide();\n      return;\n    }\n\n    setTimeout(() => {\n      getCityFormRef.addEventListener('submit', handleSubmit);\n      fetchWeather(`${data.latitude},${data.longitude}`).then(data => {\n        if (Object.keys(data).length === 1) {\n          spinner.hide();\n          return;\n        }\n        updateFaceData(data);\n        return;\n      });\n      spinner.hide();\n      return;\n    }, 5000);\n  }, 20);\n});\n","import PNotify from '../../node_modules/pnotify/dist/es/PNotify';\r\nimport spinner from './spinner';\r\nexport default function getGeoPosition() {\r\n  const options = {\r\n    enableHighAccuracy: true,\r\n    timeout: 5000,\r\n    maximumAge: 1800000,\r\n  };\r\n\r\n  const processData = {};\r\n\r\n  const promise = new Promise((resolve, reject) => {\r\n    function success(pos) {\r\n      const crd = pos.coords;\r\n      processData.latitude = crd.latitude;\r\n      processData.longitude = crd.longitude;\r\n    }\r\n\r\n    function error(err) {\r\n      console.warn(`ERROR(${err.code}): ${err.message}`);\r\n\r\n      PNotify.notice({\r\n        text: 'Нет доступа к геопозиции, используйте поиск по имени города.',\r\n      });\r\n      spinner.hide();\r\n      //Расскоментировать для вывода уведомлний пользователю о причинах недоступной геолокации\r\n\r\n      // switch (err.code) {\r\n      //   case err.PERMISSION_DENIED:\r\n      //     alert(\r\n      //       'Пользователь не разрешил определить местоположение. Воспользуйтесь поиском по названию города',\r\n      //     );\r\n\r\n      //     break;\r\n      //   case err.TIMEOUT:\r\n      //     alert(\r\n      //       'Время ожидания браузером на определение местоположения прошло. Воспользуйтесь поиском по названию города или перезагрузите страницу и в течение 5 секунд позвольте браузеру определять ваше местоположение ',\r\n      //     );\r\n      //     break;\r\n      //   case err.POSITION_UNAVAILABLE:\r\n      //     alert(\r\n      //       'Информация о местоположении недоступна. Воспользуйтесь поиском по названию города',\r\n      //     );\r\n      //     break;\r\n      //   case err.UNKNOWN_ERROR:\r\n      //     alert(\r\n      //       'Произошла неизвестная ошибка определения местоположения. Воспользуйтесь поиском по названию города',\r\n      //     );\r\n      //     break;\r\n      //   default:\r\n      //     alert('Error.code: ' + err.code + ' Error.message: ' + err.message);\r\n      //     break;\r\n      // }\r\n      return (processData.error = `ERROR(${err.code}): ${err.message}`);\r\n    }\r\n    navigator.geolocation.getCurrentPosition(success, error, options);\r\n\r\n    resolve(processData);\r\n  });\r\n\r\n  return promise;\r\n}\r\n"],"sourceRoot":""}